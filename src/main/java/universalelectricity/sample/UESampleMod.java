package universalelectricity.sample;

import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.network.NetworkRegistry;
import scala.actors.threadpool.Arrays;

/**
 * Created by robert on 8/22/2014.
 */
@Mod(modid = UESampleMod.NAME, name = UESampleMod.MOD_ID, version = UESampleMod.VERSION, dependencies = "required-after:UniversalElectricity")
public class UESampleMod
{
    public static final String NAME = "UE Sample Mod";
    public static final String MOD_ID = "UE Sample Mod";
    public static final String BUILD = "@BUILD@";
    public static final String VERSION = "@MAJOR@.@MINOR@.@REVIS@";

    @SidedProxy(clientSide = "universalelectricity.sample.ClientProxy", serverSide = "universalelectricity.sample.CommonProxy")
    public static CommonProxy proxy;

    @Mod.Metadata(MOD_ID)
    public static ModMetadata metadata  = null;

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent evt)
    {
        NetworkRegistry.INSTANCE.registerGuiHandler(this, proxy);

        //Create Blocks

        //Register Blocks

        //Create Items

        //Register Items

        proxy.preInit();
    }

    @Mod.EventHandler
    public void init(FMLInitializationEvent evt)
    {
        if(metadata != null) {
            metadata.modId = MOD_ID;
            metadata.name = NAME;
            metadata.description = NAME + " is a sample mod designed to help develiper understand how to implement UE";
            metadata.url = "https://github.com/Universal-Electricity/SampleMod";
            metadata.version = VERSION + BUILD;
            metadata.authorList = Arrays.asList(new String[]{"DarkCow"});
            metadata.autogenerated = false;
        }
        proxy.init();
    }

    @Mod.EventHandler
    public void postInit(FMLPostInitializationEvent evt)
    {
        //Handler Recipes


        proxy.postInit();
    }
}
